"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8280],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=s,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5182:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7462),s=(t(7294),t(3905));const o={},a="Stores",i={unversionedId:"Svelte/stores",id:"Svelte/stores",title:"Stores",description:"useConnect",source:"@site/docs/05-Svelte/04-stores.md",sourceDirName:"05-Svelte",slug:"/Svelte/stores",permalink:"/docs/docs/Svelte/stores",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/05-Svelte/04-stores.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/docs/docs/Svelte/components"},next:{title:"FAQ",permalink:"/docs/docs/FAQ"}},l={},c=[{value:"useConnect",id:"useconnect",level:2},{value:"Usage",id:"usage",level:3},{value:"useCanister",id:"usecanister",level:2},{value:"Usage",id:"usage-1",level:3},{value:"useDialog",id:"usedialog",level:2},{value:"Usage",id:"usage-2",level:3},{value:"useWallet",id:"usewallet",level:2},{value:"Usage",id:"usage-3",level:3},{value:"useBalance",id:"usebalance",level:2},{value:"Usage",id:"usage-4",level:3},{value:"useProviders",id:"useproviders",level:2},{value:"Usage",id:"usage-5",level:3}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stores"},"Stores"),(0,s.kt)("h2",{id:"useconnect"},"useConnect"),(0,s.kt)("p",null,"Gives you access to many things like the status of the connection, which provider is connected"),(0,s.kt)("h3",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script>\n  import { useConnect } from "@connect2ic/svelte"\n\n  const {\n    principal,\n    connect,\n    disconnect,\n    status,\n    isInitializing,\n    isIdle,\n    isConnecting,\n    isConnected,\n    isDisconnecting,\n    activeProvider,\n  } = useConnect({\n    onConnect: () => {\n      // Signed in\n    },\n    onDisconnect: () => {\n      // Signed out\n    }\n  })\n  // string\n  $principal\n\n  // connect\n  connect(providerId)\n\n  // disconnect\n  disconnect()\n\n  // "initializing" | "idle" | "connecting" | "connected" | "disconnecting"\n  $status\n\n  // boolean\n  $isInitializing\n\n  // boolean\n  $isIdle\n\n  // TODO\n  $isConnecting\n\n  // boolean\n  $isConnected\n\n  // boolean\n  $isDisconnecting\n\n  // Provider\n  $activeProvider\n<\/script>\n')),(0,s.kt)("h2",{id:"usecanister"},"useCanister"),(0,s.kt)("p",null,"Automatically switches between the anonymous & connected identity for the canister. Authenticated calls are now easy."),(0,s.kt)("h3",{id:"usage-1"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script>\n  import { useCanister } from "@connect2ic/svelte"\n\n  const [counter, { loading, error }] = useCanister("counter")\n\n  // Make calls to the canister as you would normally\n  $counter.increment()\n\n  // boolean\n  $loading\n\n  // TODO\n  $error\n\n  // Always use the non-signed in identity to make canister calls\n  const [counter] = useCanister("counter", { mode: "anonymous" })\n<\/script>\n')),(0,s.kt)("h2",{id:"usedialog"},"useDialog"),(0,s.kt)("p",null,"Programmatically control the prestyled ",(0,s.kt)("inlineCode",{parentName:"p"},"<Dialog />")," or check its state."),(0,s.kt)("h3",{id:"usage-2"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script>\n  import { useDialog } from "@connect2ic/svelte"\n\n  const { open, close, isOpen } = useDialog()\n\n  // opens the dialog\n  open()\n\n  // closes the dialog\n  close()\n\n  // true | false\n  $isOpen\n\n<\/script>\n')),(0,s.kt)("h2",{id:"usewallet"},"useWallet"),(0,s.kt)("p",null,"Wallet info and addresses."),(0,s.kt)("h3",{id:"usage-3"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script>\n  import { useWallet } from "@connect2ic/svelte"\n\n  const [wallet] = useWallet()\n\n  // wallet | false\n  $wallet\n\n  // string\n  $wallet.principal\n<\/script>\n')),(0,s.kt)("h2",{id:"usebalance"},"useBalance"),(0,s.kt)("p",null,"Provides you with a list of the users assets when a wallet is connected."),(0,s.kt)("h3",{id:"usage-4"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script>\n  import { useBalance } from "@connect2ic/svelte"\n\n  const [assets, { refetch, error }] = useBalance()\n\n  $assets?.map(asset => {\n    // string\n    asset.canisterId\n\n    // string\n    asset.name\n\n    // number\n    asset.amount\n  })\n\n  // refetch the balance\n  refetch()\n\n  // Error\n  $error\n<\/script>\n')),(0,s.kt)("h2",{id:"useproviders"},"useProviders"),(0,s.kt)("p",null,"Gives you direct access to the providers, when you need more control."),(0,s.kt)("h3",{id:"usage-5"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script>\n  import { useProviders } from "@connect2ic/svelte"\n\n  const [providers] = useProviders()\n\n  // Array<Provider>\n  $providers?.map(provider => {\n    // Provider\n    provider\n    \n    // string\n    provider.meta.id\n\n    // string\n    provider.meta.name\n\n    // <img /> src string\n    provider.meta.icon.light\n    provider.meta.icon.dark\n  })\n<\/script>\n')))}p.isMDXComponent=!0}}]);