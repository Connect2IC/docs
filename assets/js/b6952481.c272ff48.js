"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1449],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),g=o,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||a;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={},s="Hooks",i={unversionedId:"React/hooks",id:"React/hooks",title:"Hooks",description:"useConnect",source:"@site/docs/03-React/04-hooks.md",sourceDirName:"03-React",slug:"/React/hooks",permalink:"/docs/docs/React/hooks",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-React/04-hooks.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/docs/docs/React/components"},next:{title:"Getting started",permalink:"/docs/docs/Vue/quick_start_vue"}},c={},l=[{value:"useConnect",id:"useconnect",level:2},{value:"Usage",id:"usage",level:3},{value:"useCanister",id:"usecanister",level:2},{value:"Usage",id:"usage-1",level:3},{value:"useDialog",id:"usedialog",level:2},{value:"Usage",id:"usage-2",level:3},{value:"useWallet",id:"usewallet",level:2},{value:"Usage",id:"usage-3",level:3},{value:"useBalance",id:"usebalance",level:2},{value:"Usage",id:"usage-4",level:3},{value:"useProviders",id:"useproviders",level:2},{value:"Usage",id:"usage-5",level:3}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hooks"},"Hooks"),(0,o.kt)("h2",{id:"useconnect"},"useConnect"),(0,o.kt)("p",null,"Gives you access to many things like the status of the connection, which provider is connected"),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useConnect } from "@connect2ic/react"\n\nfunction App() {\n  const {\n    principal,\n    connect,\n    disconnect,\n    status,\n    isInitializing,\n    isIdle,\n    isConnecting,\n    isConnected,\n    isDisconnecting,\n    activeProvider,\n  } = useConnect({\n    onConnect: () => {\n      // Signed in\n    },\n    onDisconnect: () => {\n      // Signed out\n    }\n  })\n\n  // string\n  principal\n\n  // connect\n  connect(providerId)\n\n  // "initializing" | "idle" | "connecting" | "connected" | "disconnecting"\n  status\n\n  // disconnect\n  disconnect()\n  \n  // boolean\n  isInitializing\n\n  // boolean\n  isIdle\n\n  // TODO\n  isConnecting\n\n  // boolean\n  isConnected\n\n  // boolean\n  isDisconnecting\n}\n')),(0,o.kt)("h2",{id:"usecanister"},"useCanister"),(0,o.kt)("p",null,"Automatically switches between the anonymous & connected identity for the canister. Authenticated calls are now easy."),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useCanister } from "@connect2ic/react"\n\nfunction App() {\n  const [counter, { loading, error }] = useCanister("counter")\n\n  // Make calls to the canister as you would normally\n  counter.increment()\n\n  // boolean\n  loading\n\n  // TODO\n  error\n\n  // Always use the non-signed in identity to make canister calls\n  const [counter] = useCanister("counter", { mode: "anonymous" })\n}\n')),(0,o.kt)("h2",{id:"usedialog"},"useDialog"),(0,o.kt)("p",null,"Programmatically control the prestyled ",(0,o.kt)("inlineCode",{parentName:"p"},"<Dialog />")," or check its state."),(0,o.kt)("h3",{id:"usage-2"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useDialog } from "@connect2ic/react"\n\nfunction App() {\n  const { open, close, isOpen } = useDialog()\n\n  // opens the dialog\n  open()\n\n  // closes the dialog\n  close()\n\n  // true | false\n  isOpen\n}\n')),(0,o.kt)("h2",{id:"usewallet"},"useWallet"),(0,o.kt)("p",null,"Wallet info and addresses."),(0,o.kt)("h3",{id:"usage-3"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useWallet } from "@connect2ic/react"\n\nfunction App() {\n  const [wallet] = useWallet()\n\n  // wallet | false\n  wallet\n\n  // string\n  wallet.principal\n}\n')),(0,o.kt)("h2",{id:"usebalance"},"useBalance"),(0,o.kt)("p",null,"Provides you with a list of the users assets when a wallet is connected."),(0,o.kt)("h3",{id:"usage-4"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useBalance } from "@connect2ic/react"\n\nfunction App() {\n  const [assets, { refetch, error }] = useBalance()\n\n  assets.map(asset => {\n    // string\n    asset.canisterId\n\n    // string\n    asset.name\n\n    // number\n    asset.amount\n  })\n  \n  // refetch the balance\n  refetch()\n  \n  // Error\n  error\n}\n')),(0,o.kt)("h2",{id:"useproviders"},"useProviders"),(0,o.kt)("p",null,"Gives you direct access to the providers, when you need more control."),(0,o.kt)("h3",{id:"usage-5"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useProviders } from "@connect2ic/react"\n\nfunction App() {\n  const [providers] = useProviders()\n\n  // Array<Provider>\n  providers.map(provider => {\n    // Provider\n    provider\n    \n    // string\n    provider.meta.id\n\n    // string\n    provider.meta.name\n\n    // <img /> src string\n    provider.meta.icon.light\n    provider.meta.icon.dark\n  })\n}\n')))}p.isMDXComponent=!0}}]);