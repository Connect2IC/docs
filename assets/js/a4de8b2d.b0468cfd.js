"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3885],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(t),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return t?r.createElement(m,c(c({ref:n},p),{},{components:t})):r.createElement(m,c({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=u;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const o={},c="Client",a={unversionedId:"Core/Client",id:"Core/Client",title:"Client",description:"createClient",source:"@site/docs/02-Core/01-Client.md",sourceDirName:"02-Core",slug:"/Core/Client",permalink:"/docs/docs/Core/Client",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-Core/01-Client.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Providers",permalink:"/docs/docs/Core/Providers"}},s={},l=[{value:"createClient",id:"createclient",level:2},{value:"Usage",id:"usage",level:3}],p={toc:l};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"client"},"Client"),(0,i.kt)("h2",{id:"createclient"},"createClient"),(0,i.kt)("p",null,"The connect2ic client which can be used outside the supported frameworks"),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { createClient } from "@connect2ic/core"\nimport { InternetIdentity } from "@connect2ic/core/providers/internet-identity"\nimport { AstroX } from "@connect2ic/core/providers/astrox"\nimport { PlugWallet } from "@connect2ic/core/providers/plug-wallet"\nimport * as myCanister from "dfx-generated/myCanister"\n\nconst client = createClient({\n  providers: [\n    // You may pass in different options to each provider\n    new InternetIdentity({ providerUrl: "https://ic0.app" }),\n    new AstroX({ dev: true }),\n    new PlugWallet(),\n  ],\n  // Pass in canister definitions (as generated by dfx)\n  // \n  // {\n  //   [canisterName: string]: {\n  //     canisterId: string,\n  //     idlFactory: IDL.InterfaceFactory,\n  //   }\n  // }\n  canisters: {\n    myCanister\n  },\n  \n  // Global config options for providers\n  // These are options you want to enable on all providers\n  globalProviderConfig: {\n    // Determines whether root key is fetched\n    // Should be enabled while developing locally & disabled in production\n    dev: true,\n    // The host\n    host: "https://localhost:3000",\n    // Certain providers require specifying an app name\n    appName: "my-app",\n    // Certain providers require specifying which canisters are whitelisted\n    // Array<string>\n    whitelist: ["canister-principal-id"],\n    // Certain providers allow you to specify a canisterId for the Ledger canister\n    // For example when running it locally\n    ledgerCanisterId: "ledger-canister-principal-id",\n    // Certain providers allow you to specify a host for the Ledger canister\n    // For example when running it locally\n    ledgerHost: "https://localhost:3000"\n  },\n})\n\n// "connect" | "disconnect" | "init"\nclient.on("connect", () => {\n  // Connected\n})\n\n// Subscribe to client state changes\nconst unsub = client.subscribe((state) => {\n  // New state\n  state\n})\n\n// unsubscribe from state changes\nunsub()\n\n// Connect to the specified provider\nclient.connect(providerId)\n\n// Disconnects the currently active provider\nclient.disconnect()\n\n// Array<Provider>\nclient.providers\n\n// Provider\nclient.activeProvider\n\n// string\nclient.principal\n\n// { [canisterName: string]: ActorSubclass }\nclient.actors\n\n// { [canisterName: string]: ActorSubclass }\nclient.anonymousActors\n\n// "initializing" | "idle" | "connecting" | "connected" | "disconnecting"\nclient.status\n\n// get / set config\nclient.config\n\n// Used internally by hooks\nclient._service\n')))}d.isMDXComponent=!0}}]);