"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3910],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,v=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(v,a(a({ref:n},u),{},{components:t})):r.createElement(v,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5173:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=t(7462),o=t(3366),s=(t(7294),t(3905)),a=["components"],i={},c="Composables",l={unversionedId:"Vue/composables",id:"Vue/composables",title:"Composables",description:"useConnect",source:"@site/docs/04-Vue/04-composables.md",sourceDirName:"04-Vue",slug:"/Vue/composables",permalink:"/docs/docs/Vue/composables",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-Vue/04-composables.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/docs/docs/Vue/components"},next:{title:"Getting started",permalink:"/docs/docs/Svelte/quick_start_svelte"}},u={},p=[{value:"useConnect",id:"useconnect",level:2},{value:"Usage",id:"usage",level:3},{value:"useCanister",id:"usecanister",level:2},{value:"Usage",id:"usage-1",level:3},{value:"useDialog",id:"usedialog",level:2},{value:"Usage",id:"usage-2",level:3},{value:"useWallet",id:"usewallet",level:2},{value:"Usage",id:"usage-3",level:3},{value:"useBalance",id:"usebalance",level:2},{value:"Usage",id:"usage-4",level:3},{value:"useProviders",id:"useproviders",level:2},{value:"Usage",id:"usage-5",level:3}],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"composables"},"Composables"),(0,s.kt)("h2",{id:"useconnect"},"useConnect"),(0,s.kt)("p",null,"Gives you access to many things like the status of the connection, which provider is connected"),(0,s.kt)("h3",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<script setup>\n  import { useConnect } from "@connect2ic/vue"\n\n  const {\n    principal,\n    connect,\n    disconnect,\n    isIdle,\n    isConnecting,\n    isConnected,\n    isDisconnecting,\n    activeProvider,\n  } = useConnect({\n    onConnect: () => {\n      // Signed in\n    },\n    onDisconnect: () => {\n      // Signed out\n    }\n  })\n  // string\n  principal.value\n\n  // connect\n  connect(providerId)\n\n  // disconnect\n  disconnect()\n\n  // Ref<boolean>\n  isIdle.value\n\n  // TODO\n  isConnecting.value\n\n  // Ref<boolean>\n  isConnected.value\n\n  // Ref<boolean>\n  isDisconnecting.value\n\n  // Provider\n  activeProvider.value\n<\/script>\n')),(0,s.kt)("h2",{id:"usecanister"},"useCanister"),(0,s.kt)("p",null,"Automatically switches between the anonymous & connected identity for the canister. Authenticated calls are now easy."),(0,s.kt)("h3",{id:"usage-1"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<script setup>\n  import { useCanister } from "@connect2ic/vue"\n\n  const [counter, { loading, error }] = useCanister("counter")\n\n  // Make calls to the canister as you would normally\n  counter.value.increment()\n\n  // Ref<boolean>\n  loading.value\n\n  // TODO\n  error.value\n\n  // Always use the non-signed in identity to make canister calls\n  const [counter] = useCanister("counter", { mode: "anonymous" })\n<\/script>\n')),(0,s.kt)("h2",{id:"usedialog"},"useDialog"),(0,s.kt)("p",null,"Programmatically control the prestyled ",(0,s.kt)("inlineCode",{parentName:"p"},"<Dialog />")," or check its state."),(0,s.kt)("h3",{id:"usage-2"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\n<script setup>\n  import { useDialog } from "@connect2ic/vue"\n\n  const { open, close, isOpen } = useDialog()\n\n  // opens the dialog\n  open()\n\n  // closes the dialog\n  close()\n\n  // Ref<boolean>\n  isOpen.value\n<\/script>\n')),(0,s.kt)("h2",{id:"usewallet"},"useWallet"),(0,s.kt)("p",null,"Wallet info and addresses."),(0,s.kt)("h3",{id:"usage-3"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<script setup>\n  import { useWallet } from "@connect2ic/vue"\n\n  const [wallet] = useWallet()\n\n  // Ref<wallet>\n  wallet.value\n\n  // string\n  wallet.value.principal\n<\/script>\n')),(0,s.kt)("h2",{id:"usebalance"},"useBalance"),(0,s.kt)("p",null,"Provides you with a list of the users assets when a wallet is connected."),(0,s.kt)("h3",{id:"usage-4"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<script setup>\n  import { useBalance } from "@connect2ic/vue"\n\n  const [assets] = useBalance()\n\n  // Ref<assets> | undefined\n  assets.value.map(asset => {\n    // string\n    asset.canisterId\n\n    // string\n    asset.name\n\n    // number\n    asset.amount\n  })\n<\/script>\n')),(0,s.kt)("h2",{id:"useproviders"},"useProviders"),(0,s.kt)("p",null,"Gives you direct access to the providers, when you need more control."),(0,s.kt)("h3",{id:"usage-5"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<script setup>\n  import { useProviders } from "@connect2ic/vue"\n\n  const [providers] = useProviders()\n\n  // Ref<Array<Provider>>\n  providers.value?.map(provider => {\n    // string\n    provider.id\n\n    // string\n    provider.name\n\n    // <img /> src string\n    provider.icon.light\n    provider.icon.dark\n\n    // Connector\n    provider.connector\n  })\n<\/script>\n')))}m.isMDXComponent=!0}}]);